#!/usr/bin/env perl
########################################################
# Adapted from Penetration Testing With Perl           #
# by Douglas Berdeaux                                  #
# Chapter 3 IEEE 802.3 Wired Network Mapping with Perl #
########################################################

=head2 SYNOPSIS

This program detects live hosts on the network the computer is on using ARP broadcast packets and lookups up the MAC manufacturer of the livehost.

Run with system Perl:

  $ sudo ./livehost_scanner_oui [device name]

Run with plenv or perlbrew:

  $ sudo $(which perl) livehost_scanner_oui [device_name]

Examples

  $ sudo ./livehost_scanner_oui
  ...

  $ sudo ./livehost_scanner_oui eth0
  ...

  $ sudo ./livehost_scanner_oui wlp2s0
  ...

=head2 Tips

If you don't know the device name you'd like to use, C<livehost_scanner> will autodetect
one for you. Run one of these commands to see the device names on your machine:
C<ifconfig> or C<ip addr>.

=cut

use strict;
use warnings;
use feature qw/say state/;
use Net::ARP;
use Net::Address::IP::Local;
use Net::Frame::Device;
use Net::Frame::Dump::Online;
use Net::Frame::Simple;
use Net::Netmask;
use Net::Pcap ();

my $network_device_name = $ARGV[0] if @ARGV;

unless ($network_device_name)
{
  $network_device_name = Net::Pcap::pcap_lookupdev(\my $error_msg);
  die "pcap device lookup failed " . ($error_msg || '')
    if $error_msg || not defined $network_device_name;
}

my $device = Net::Frame::Device->new(dev => $network_device_name);
my $gateway_ip = $device->gatewayIp;
my $local_ip  = Net::Address::IP::Local->public;

my $pcap = Net::Frame::Dump::Online->new(
  dev => $network_device_name,
  filter => 'arp and dst host ' . $device->ip,
  promisc => 0,
  unlinkOnStop => 1,
  timeoutOnNext => 10
);

printf "Gateway IP: %s\nStarting scan\n", $gateway_ip;

$pcap->start;

for my $ip_address (Net::Netmask->new($device->subnet)->enumerate)
{
  Net::ARP::send_packet(
    $network_device_name,
    $device->ip,
    $ip_address,
    $device->mac,
    "ff:ff:ff:ff:ff:ff", # broadcast
    "request",
  );
}

until ($pcap->timeout)
{
  if (my $next = $pcap->next)
  {
    my $frame     = Net::Frame::Simple->newFromDump($next);
    my $frame_ip  = $frame->ref->{ARP}->srcIp;
    my $frame_mac = $frame->ref->{ARP}->src;
    my $manufacturer = oui_lookup($frame_mac);

    # don't print anything if the response is from the gateway, or the local machine
    unless ($frame_ip eq $gateway_ip || $frame_ip eq $local_ip)
    {
      printf "%-16s %-18s %-30s\n", $frame_ip, $frame_mac, $manufacturer;
    }
  }
}

sub oui_lookup
{
  my $mac_address = shift;
  $mac_address =~ s/:/-/g;
  my $oui = substr $mac_address, 0, 8;

  state @oui_lines; # memoize this

  unless (@oui_lines)
  {
    open (my $oui_file, '<', 'data/oui.txt') or die $!;
    @oui_lines = <$oui_file>;
  }

  for my $line (@oui_lines)
  {
    if($line =~ /$oui/i)
    {
      my ($address, $manufacturer_name) = split /\t+/, $line;
      chomp $manufacturer_name;
      return "$manufacturer_name";
      last;
    }
  }
  return "Unknown";
}

END { say "Exiting."; $pcap->stop if $pcap }
