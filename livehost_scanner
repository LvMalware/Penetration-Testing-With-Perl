#!/usr/bin/env perl
########################################################
# Adapted from Penetration Testing With Perl           #
# by Douglas Berdeaux                                  #
# Chapter 3 IEEE 802.3 Wired Network Mapping with Perl #
########################################################

=head2 SYNOPSIS

  $ sudo $(which perl) ./livehost_scanner [device_name]

=cut

use strict;
use warnings;
use feature 'say';
use Net::ARP;
use Net::Frame::Device;
use Net::Frame::Dump::Online;
use Net::Frame::Simple;
use Net::Netmask;
use Net::Pcap ();

my $network_device_name = $ARGV[0] if @ARGV;

unless ($network_device_name)
{
  $network_device_name = Net::Pcap::pcap_lookupdev(\my $error_msg);
  die "pcap device lookup failed " . ($error_msg || '')
    if $error_msg || not defined $network_device_name;
}

my $device = Net::Frame::Device->new(dev => $network_device_name);
my $ip = $device->ip;
my $gateway = $device->gatewayIp;
my $netmask = Net::Netmask->new($device->subnet);
my $mac = $device->mac;

my $pcap = Net::Frame::Dump::Online->new(
  dev => $network_device_name,
  filter => "arp and dst host $ip",
  promisc => 0,
  unlinkOnStop => 1,
  timeoutOnNext => 10
);

say "Gateway IP: $gateway\nStarting scan";
$pcap->start;

for my $ip_address ($netmask->enumerate)
{
  Net::ARP::send_packet(
    $network_device_name,
    $ip,
    $ip_address,
    $mac,
    "ff:ff:ff:ff:ff:ff", # broadcast
    "request"
  );
}

until ($pcap->timeout)
{
  if (my $next = $pcap->next)
  {
    my $frame = Net::Frame::Simple->newFromDump($next);
    say $frame->ref->{ARP}->srcIp," is alive";
  }
}

say "Exiting";
$pcap->stop;
