#!/usr/bin/env perl
########################################################
# Adapted from Penetration Testing With Perl           #
# by Douglas Berdeaux                                  #
# Chapter 3 IEEE 802.3 Wired Network Mapping with Perl #
########################################################
use warnings;
use strict;
use List::Util qw(shuffle);
use Net::Address::IP::Local;
use Net::Pcap;
use Net::RawIP;
use NetPacket::Ethernet;
use NetPacket::IP;
use NetPacket::TCP;
use feature 'say';

die "Usage:\n\t./portscanner <target ip> <port-range> <timeout secs> <pause secs>" unless @ARGV == 4;

my ($target_ip, $port_range, $reqType, $pause) = @ARGV;;

my $my_port = 55378;
$port_range =~ /([0-9]+)-([0-9]+)/;
my @port_ranges = $1..$2;

my ($ports, $open, $closed, $filtered) = (0, 0, 0, 0);

# most commonly used ports first:
my $common_ports = qr/^(?:20|21|23|25|42|53|67|68|69|80|88|102|110|119|135|137|138|139|143|161|162|389|443|445|464|500|515|522|531|543|544|548|554|560|563|568|569|636|993|995|1024|1234|1433|1500|1503|1645|1646|1701|1720|1723|1731|1801|1812|1813|2053|2101|2103|2105|2500|2504|3389|3527|5000|6665|6667|8000|8001|8002)$/;

my %winports = (
  135 => 'msrpc',
  139 => 'netbios-ssn',
  445 => 'microsoft-ds',
  554 => 'rtsp',
 2869 => 'icslap',
 5357 => 'wsdapi',
);

my %rtrports = (
   80 => 'http',
  443 => 'https',
 8080 => 'http-proxy',
 5000 => 'upnp',
 8888 => 'sun-answerbook'
);

my ($win, $rtr) = (0, 0);
my ($net, $mask, $filter, $packet);
my $device_name = pcap_lookupdev(\my $err);
pcap_lookupnet($device_name, \$net, \$mask, \$err);
my $pcap = pcap_open_live($device_name, 1024, 0, 1000, \$err);
pcap_compile($pcap, \$filter,"(src net $target_ip) && (dst port $my_port)", 0, $mask);
pcap_setfilter($pcap,$filter);
my %header;

# common ports first:
&sniffPacket($_) foreach(shuffle(grep(/$common_ports/,@port_ranges)));
&sniffPacket($_) foreach(shuffle(grep(!/$common_ports/,@port_ranges)));

say "\n $ports ports scanned, $filtered filtered, $open open";

if ($rtr || $win)
{
  printf "\nOS Guess: %s\n", ($rtr > $win ? 'Router Firmware' : 'Windows OS');
}

pcap_close($pcap) if $pcap;# release resources

sub sniffPacket
{
  sleep($pause);
  $ports++;
  my $port = shift;
  send_packet($port); # send the TCP request
  while(1)
  {
    my $pktRef = pcap_next_ex($pcap,\%header,\$packet);
    if($pktRef == 1)
    { # we've got a packet:
      my $eth = NetPacket::Ethernet::strip($packet);
      my $ethdec = NetPacket::Ethernet->decode($packet);
      my $tcp = NetPacket::TCP->decode(NetPacket::IP::strip($eth));

      if($tcp->{'flags'} == 18)
      {
        $open++;
        print $port,"\topen\t";
        if (exists $rtrports{$_})
        {
          print $rtrports{$_}; $rtr++;
        }
        elsif (exists $winports{$_})
        {
          print $winports{$_}; $win++; 
        }
        else
        {
          print "unknown port."
        }
        print "\n";
      }
      elsif($tcp->{'flags'} == 20)
      {
        last; # found response, next ip
      }
    }
    elsif($pktRef == 0)
    {
      $filtered++; # filtered port from no response.
      last; # found response, next ip
    }
    else
    {
      print "packets error!\n";
    }
  }
  return undef;
}

sub send_packet
{
  my $target_port = shift;
  Net::RawIP->new({
    ip => {
      saddr => Net::Address::IP::Local->public,
      daddr => $target_ip,
    },
    tcp => {
      source => $my_port,
      dest => $target_port,
      #syn => 1,
    },
  })->send;
}
